stages:
  - build
  - test
  - deploy

variables:
  APPIMAGE_NAME: Installer_GUI-x86_64.AppImage
  PYTHON_VERSION: "3.9"

build_linux_appimage:
  stage: build
  image: python:${PYTHON_VERSION}-buster
  before_script:
    # Install dependencies
    - apt-get update && apt-get install -y fuse libfuse2
    - pip install pyinstaller
    - wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
    - chmod +x appimagetool-x86_64.AppImage
  script:
    # Prepare AppDir structure
    - mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps
    
    # Build the application
    - pyinstaller --onefile --windowed installer-gui.py
    - mv dist/installer-gui AppDir/usr/bin/
    
    # Create desktop entry file
    - |
      cat << EOF > AppDir/usr/share/applications/installer-gui.desktop
      [Desktop Entry]
      Name=Installer GUI
      Exec=installer-gui
      Icon=installer-gui
      Type=Application
      Categories=Utility;
      EOF
    
    # Create AppImage
    - ./appimagetool-x86_64.AppImage AppDir
  artifacts:
    paths:
      - ${APPIMAGE_NAME}

test_appimage:
  stage: test
  image: ubuntu:latest
  script:
    - chmod +x ${APPIMAGE_NAME}
    - ./${APPIMAGE_NAME} --version || true  # Add a real test command if available
  dependencies:
    - build_linux_appimage

deploy_appimage:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying ${APPIMAGE_NAME}"
    # Add your deployment commands here, e.g.:
    # - apt-get update && apt-get install -y curl
    # - curl -T ${APPIMAGE_NAME} https://your-storage-or-release-url.com
  dependencies:
    - build_linux_appimage
  only:
    - main  # Only deploy on the main branch

